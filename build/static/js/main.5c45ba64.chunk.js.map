{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","width","height","theme","contentType","subheadline","headlineLine1","headlineLine2","headlineLine3","headlineLine4","headlineLine5","displayLine","callToAction","appStyle","className","data-theme","style","data-width","data-height","data-text-type","data-max-line","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","templateProps","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAIA,SAASA,EAAT,GAC0J,IAAxJC,EAAuJ,EAAvJA,MAAOC,EAAgJ,EAAhJA,OAAQC,EAAwI,EAAxIA,MAAOC,EAAiI,EAAjIA,YAAaC,EAAoH,EAApHA,YAAaC,EAAuG,EAAvGA,cAAeC,EAAwF,EAAxFA,cAAeC,EAAyE,EAAzEA,cAAeC,EAA0D,EAA1DA,cAAeC,EAA2C,EAA3CA,cAAeC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,aAEhIC,EAAW,CACfZ,MAAM,GAAD,OAAKA,EAAL,MACLC,OAAO,GAAD,OAAKA,EAAL,OAIU,yHAAD,OAA2HC,EAA3H,YAAoIF,EAApI,YAA6IC,EAA7I,SAGnB,OACE,yBAAKY,UAAU,MAAMC,aAAYZ,EAAOa,MAAOH,GAC/C,yBAAKI,aAAYhB,EAAOiB,cAAahB,GAEnC,yBAAKY,UAAU,YAAYC,aAAYZ,EAAOgB,iBAAgBf,GAC5D,yBAAKU,UAAU,sBAAsBM,gBAAc,KAAI,4BAAKf,IAC5D,yBAAKS,UAAU,WACb,yBAAKA,UAAU,0BAA0BM,gBAAc,KAAI,4BAAKd,IAChE,yBAAKQ,UAAU,0BAA0BM,gBAAc,KAAI,4BAAKb,IAChE,yBAAKO,UAAU,0BAA0BM,gBAAc,KAAI,4BAAKZ,IAChE,yBAAKM,UAAU,0BAA0BM,gBAAc,KAAI,4BAAKX,IAChE,yBAAKK,UAAU,0BAA0BM,gBAAc,KAAI,4BAAKV,KAElE,yBAAKI,UAAU,uBAAuBM,gBAAc,KAAI,4BAAKT,IAC7D,yBAAKG,UAAU,0BAAyB,uBAAGM,gBAAc,KAAKR,OAqBtEZ,EAAIqB,aAAe,CACjBpB,MAAO,KACPC,OAAQ,KACRC,MAAO,EACPC,YAAa,YACbC,YAAa,YACbC,cAAe,wBACfC,cAAe,mBACfC,cAAe,aACfC,cAAe,GACfC,cAAe,GACfC,YAAa,GACbC,aAAc,wBAIDZ,QCvDKsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAQN,OAAOO,gBAElBC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5c45ba64.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./App.scss\";\r\n\r\nfunction App({\r\n  width, height, theme, contentType, subheadline, headlineLine1, headlineLine2, headlineLine3, headlineLine4, headlineLine5, displayLine, callToAction}) {\r\n    \r\n    const appStyle = {\r\n      width: `${width}px`,\r\n      height: `${height}px`,\r\n    };\r\n\r\n    const placeholderBkg = {\r\n      backgroundImage: `url(https://cdn.jsdelivr.net/gh/OutfitDelivery/cloudera-digi-advert1-make-template@master/src/assets/Placeholder/Theme${theme}/${width}x${height}.png)`,\r\n    };\r\n  \r\n  return (\r\n    <div className=\"App\" data-theme={theme} style={appStyle}>\r\n    <div data-width={width} data-height={height}>\r\n      {/* <div className=\"placeholder\" style={placeholderBkg}></div> */}\r\n      <div className=\"text-area\" data-theme={theme} data-text-type={contentType}>\r\n        <div className=\"subheadline text-el\" data-max-line=\"2\"><h2>{subheadline}</h2></div>\r\n        <div className=\"heading\">\r\n          <div className=\"headline line-1 text-el\" data-max-line=\"1\"><h1>{headlineLine1}</h1></div>\r\n          <div className=\"headline line-2 text-el\" data-max-line=\"1\"><h1>{headlineLine2}</h1></div>\r\n          <div className=\"headline line-3 text-el\" data-max-line=\"1\"><h1>{headlineLine3}</h1></div>\r\n          <div className=\"headline line-4 text-el\" data-max-line=\"1\"><h1>{headlineLine4}</h1></div>\r\n          <div className=\"headline line-5 text-el\" data-max-line=\"1\"><h1>{headlineLine5}</h1></div>\r\n        </div>\r\n        <div className=\"display-line text-el\" data-max-line=\"1\"><h3>{displayLine}</h3></div>\r\n        <div className=\"call-to-action text-el\"><p data-max-line=\"1\">{callToAction}</p></div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nApp.propTypes = {\r\n  width: PropTypes.number,\r\n  height: PropTypes.number, \r\n  theme: PropTypes.number, \r\n  contentType: PropTypes.string, \r\n  subheadline: PropTypes.string, \r\n  headlineLine1: PropTypes.string, \r\n  headlineLine2: PropTypes.string, \r\n  headlineLine3: PropTypes.string, \r\n  headlineLine4: PropTypes.string, \r\n  headlineLine5: PropTypes.string, \r\n  displayLine: PropTypes.string, \r\n  callToAction: PropTypes.string,\r\n};\r\nApp.defaultProps = {\r\n  width: 1080,\r\n  height: 1080, \r\n  theme: 1,\r\n  contentType: \"heading-3\", \r\n  subheadline: \"Analytics\", \r\n  headlineLine1: \"Three ways to achieve\", \r\n  headlineLine2: \"machine learning\", \r\n  headlineLine3: \"excellence\", \r\n  headlineLine4: \"\", \r\n  headlineLine5: \"\", \r\n  displayLine: \"\", \r\n  callToAction: \"Read the white paper\",\r\n};\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App {...window.templateProps} />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}