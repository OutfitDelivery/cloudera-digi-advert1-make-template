{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","width","height","theme","contentType","subheadline","headlineLine1","headlineLine2","headlineLine3","headlineLine4","headlineLine5","headlineSize","displayLine","displayLineSize","displayLinePosition","callToAction","appStyle","placeholderBkg","backgroundImage","conditionalTextCheck","text","classList","textChild","props","children","e","className","heightStuff","el","maxLine","elHeight","getBoundingClientRect","innerSpan","querySelector","lineHeight","window","getComputedStyle","fontSize","limitHeight","parseFloat","console","log","data-headline-size","data-display-line-size","data-theme","style","data-width","data-height","data-text-type","ref","parseInt","paddingTop","paddingBottom","maxheight","maxHeight","defaultProps","Boolean","location","hostname","match","ReactDOM","render","StrictMode","templateProps","document","getElementById","temp","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9c24bb53.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./css/App.scss\";\r\nimport \"./css/theme1.scss\";\r\nimport \"./css/theme2.scss\";\r\nimport \"./css/theme3.scss\";\r\nimport \"./css/theme4.scss\";\r\n\r\n\r\nfunction App({\r\n  width, height, theme, contentType, subheadline, headlineLine1, headlineLine2, headlineLine3, headlineLine4, headlineLine5, headlineSize, displayLine, displayLineSize, displayLinePosition, callToAction}) {\r\n    \r\n    const appStyle = {\r\n      width: `${width}px`,\r\n      height: `${height}px`,\r\n    };\r\n\r\n    const placeholderBkg = {\r\n      backgroundImage: `url(https://cdn.jsdelivr.net/gh/OutfitDelivery/cloudera-digi-advert1-make-template@master/src/assets/Placeholder/Theme${theme}/${width/4}x${height/4}.png)`,\r\n    };\r\n\r\n    function conditionalTextCheck(text, classList){\r\n      classList += \" text-el\";\r\n      let textChild = text.props.children;\r\n      try{textChild = textChild.props.children} catch(e){}\r\n      return (textChild !== \"\" && textChild !== \"null\") ? (<div className={classList}>{text}</div>) : \"\";\r\n    }\r\n\r\n    function heightStuff(el, maxLine){\r\n      let elHeight = el.getBoundingClientRect().height;\r\n      let innerSpan = el.querySelector(\"span\");\r\n      let fontSize = innerSpan != null ? window.getComputedStyle(innerSpan).fontSize : window.getComputedStyle(el).fontSize;\r\n      let lineHeight = innerSpan != null ? window.getComputedStyle(innerSpan).lineHeight : window.getComputedStyle(el).lineHeight;\r\n      let limitHeight = parseFloat(lineHeight) * maxLine + (parseFloat(lineHeight) / 2);\r\n      //var lines = parseFloat(elHeight) / parseFloat(lineHeight); \r\n      console.log(limitHeight);\r\n      console.log(elHeight);\r\n      console.log()\r\n      \r\n      //lines = (lines > 0 && lines < 1) ? 1 : lines;\r\n      //el.innerHTML = el.innerHTML + \" \" + lines;\r\n      if(elHeight > (limitHeight + 10)){\r\n        el.className = \"overflow\";\r\n      }\r\n    }\r\n\r\n    function maxHeight(el){\r\n      if(!((width == 1280 && height == 200) || (width == 1200 && height == 200))){\r\n        let elHeight = parseInt(window.getComputedStyle(el).height) - parseInt(window.getComputedStyle(el).paddingTop) - parseInt(window.getComputedStyle(el).paddingBottom);\r\n        let maxheight = window.getComputedStyle(el).maxHeight;\r\n        if(parseInt(elHeight) >= parseInt(maxheight)){\r\n          el.className = \"overflow \" + \"text-area\";\r\n        }\r\n      }\r\n    }\r\n\r\n    function between (lower, upper) {\r\n      var scale = upper - lower + 1;\r\n      return Math.floor(lower + Math.random() * scale);\r\n    }\r\n\r\n    var htmlStructure = (\r\n      <div data-headline-size={headlineSize} data-display-line-size={displayLineSize}>\r\n      <div className=\"App\" data-theme={theme} style={appStyle}>\r\n        <div data-width={width/4} data-height={height/4}>\r\n            <div className=\"placeholder\" style={placeholderBkg}></div>\r\n            <div className=\"text-area\" data-theme={theme} data-text-type={contentType} ref={el=>maxHeight(el)}>\r\n            {conditionalTextCheck(<h2 ref={el=>{heightStuff(el, 3)}}>{subheadline}</h2>, \"subheadline\")}\r\n            {displayLinePosition === \"top\" ? conditionalTextCheck(<h3 ref={el=>{heightStuff(el, 1)}}>{displayLine}</h3>, \"display-line\") : \"\"}\r\n            <div className=\"heading\">\r\n              {conditionalTextCheck(<h1 ref={el=>{heightStuff(el, 1)}}><span>{headlineLine1}</span></h1>, \"headline line-1\")}\r\n              {conditionalTextCheck(<h1 ref={el=>{heightStuff(el, 1)}}><span>{headlineLine2}</span></h1>, \"headline line-2\")}\r\n              {conditionalTextCheck(<h1 ref={el=>{heightStuff(el, 1)}}><span>{headlineLine3}</span></h1>, \"headline line-3\")}\r\n              {conditionalTextCheck(<h1 ref={el=>{heightStuff(el, 1)}}><span>{headlineLine4}</span></h1>, \"headline line-4\")}\r\n              {conditionalTextCheck(<h1 ref={el=>{heightStuff(el, 1)}}><span>{headlineLine5}</span></h1>, \"headline line-5\")}\r\n            </div>\r\n            {displayLinePosition === \"bottom\" ? conditionalTextCheck(<h3 ref={el=>{heightStuff(el, 1)}}>{displayLine}</h3>, \"display-line\") : \"\"}\r\n            {conditionalTextCheck(<p ref={el=>{heightStuff(el, 1)}}>{callToAction}</p>, \"call-to-action\")}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      </div>\r\n    );\r\n  \r\n  return htmlStructure;\r\n}\r\n\r\nApp.propTypes = {\r\n  width: PropTypes.number,\r\n  height: PropTypes.number, \r\n  theme: PropTypes.number, \r\n  contentType: PropTypes.string, \r\n  subheadline: PropTypes.string, \r\n  headlineLine1: PropTypes.string, \r\n  headlineLine2: PropTypes.string, \r\n  headlineLine3: PropTypes.string, \r\n  headlineLine4: PropTypes.string, \r\n  headlineLine5: PropTypes.string, \r\n  headlineSize: PropTypes.string,\r\n  displayLine: PropTypes.string, \r\n  displayLineSize: PropTypes.string,\r\n  displayLinePosition: PropTypes.string,\r\n  callToAction: PropTypes.string,\r\n};\r\n\r\nApp.defaultProps = {\r\n  width:1200,\r\n  height:200, \r\n  theme: 4,\r\n  contentType: \"heading-1\", \r\n  subheadline: \"\", \r\n  headlineLine1: \"Experience the platform\", \r\n  headlineLine2: \"that lets you say yes\", \r\n  headlineLine3: \"in action\", \r\n  headlineLine4: \"\", \r\n  headlineLine5: \"\",\r\n  headlineSize: \"1\",\r\n  displayLine: \"\", \r\n  displayLineSize: \"1\",\r\n  displayLinePosition: \"bottom\",\r\n  callToAction: \"Watch\",\r\n};\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nfunction temp(){\n  //var node = ReactDOM.findDOMNode(document.getElementById(\"root\"));\n  //console.log(node.querySelector(\"#test\"))\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App {...window.templateProps} />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n  temp()\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}